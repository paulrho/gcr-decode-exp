#!/bin/sh

if [ $# -lt 1 ]
then
	echo "$0 trackpattern [FILES...]"
	exit 1
fi
DECODER=./r15 
make $DECODER >/dev/null
if [ $? -ne 0 ]
then
	echo "make failed"
	exit 1
fi

mkdir work 2>/dev/null
#mkdir /var/tmp 2>/dev/null
>/var/tmp/1.col
>/var/tmp/all2.out

rm check.out 2>/dev/null 

PTRACK="$1"
PSIDE="$2"
shift
shift

if [ $# -ne 0 ]
then
  # we have files, so clear and redo the split data
    mkdir split 2>/dev/null
    rm split/*raw 2>/dev/null
    echo "splitting "$#" files..."
    # also clear out the data dir
    rm data/* 2>/dev/null
    mkdir data 2>/dev/null
  else 
    echo "using existing split"
fi

date
# 
# decoding type
TRY_TIMED=1
TRY_DYNAMIC=1
TRY_ALLSORTS=1
# with good track detector in place
#
# visual image produced:
SHOW_LOGICALFLUX=0
SHOW_GCR=0
SHOW_RAWFLUX=0
SHOW_SORT=0
#
# other outputs
# switch to g64 type output
SAVE_RAW=0 # note - if this is one - then it will only read a certain amount!! # used for G64

if [ $SAVE_RAW -eq 1 ]
then
	TRY_TIMED=1
	TRY_DYNAMIC=0
	TRY_ALLSORTS=0
fi

echo "Config: TRY_TIMED=$TRY_TIMED"
echo "Config: TRY_DYNAMIC=$TRY_DYNAMIC"
echo "Config: TRY_ALLSORTS=$TRY_ALLSORTS"
echo "Config: SHOW_LOGICALFLUX=$SHOW_LOGICALFLUX"
echo "Config: SHOW_GCR=$SHOW_GCR"
echo "Config: SHOW_RAWFLUX=$SHOW_RAWFLUX"
echo "Config: SHOW_SORT=$SHOW_SORT"
echo "Config: SAVE_RAW=$SAVE_RAW"

for FILE in $*
do
  echo "RawFile " $FILE >>/var/tmp/all2.out
  if [ "$FILE" != "" ]
  then
      # append all data
      if [ 1 -eq 1 ]
      then
	./split_append $FILE
      else
        ./split1a $FILE  # awk method
      fi
  fi
done

#for LIST in `/bin/ls -1 split/out???-track*[0246813579]side*raw`
#DOUBLESIDED# for LIST in `/bin/ls -1 split/out???-track${3}side*raw`
#for LIST in `/bin/ls -1 split/out???-track*[02468]side0.raw` # for x200
#for LIST in `/bin/ls -1 split/out???-track${3}side0.raw` # for x200
#for LIST in `/bin/ls -1 split/out???-track*[0246813579]side0.raw`

  >work/3

if [ 1 -eq 1 ]
then
  # this is now done at the disk level
  rm bitmapt*.dat 2>/dev/null
fi

for LIST in `/bin/ls -1 split/out???-track${PTRACK}side${PSIDE}.raw` # for x200
do   

  echo $LIST>>work/3
  #OUTPUT_TYPE=2 # Color GCR bits out (for valid sectors)
  ##OUTPUT_TYPE=3 # Flux out (for valid sectors)
  ##OUTPUT_TYPE=4 # no output # 3=flux+colout
  #TRACK_MONITOR=35
  #SECTOR_MONITOR=11

  OUTPUT_TYPE=0 # no output

  if [ $SHOW_LOGICALFLUX -eq 1 ]
  then
    # Show logical flux/colout mix
    OUTPUT_TYPE=3 # 3=flux+colout
  fi
  if [ $SHOW_GCR -eq 1 ]
  then
    # Show logical flux/colout mix
    OUTPUT_TYPE=1 # Color GCR bits out (for everything)
  fi

  #MONITOR_OFFSET=0
  MONITOR_OFFSET=200  # CB

  TRACK_MONITOR=6
  SECTOR_MONITOR=1

  TRACK_MONITOR=999 # anything
  #MONITOR_OFFSET=0 
  MONITOR_OFFSET=-1
  SORT=$SHOW_SORT
  #OUTPUT_TYPE=4 # no output # 3=flux

  >/var/tmp/1
  >/var/tmp/2
  #------------------------------------------------------------------------------

    TRACK=`echo "$LIST" | sed "s/.*track//" | sed "s/side.*//"`
    SIDE=`echo "$LIST" | sed "s/.*side//" | sed "s/.raw//"`
    TRACK=`expr $TRACK + 1`
    PHYSTRACK=$TRACK
    if [ $SIDE -eq 1 ]
    then
      TRACK=`expr $TRACK + 35`
      echo "$TRACK" >>work/3
    fi
  #### only do single for moment?
  #if [ $PHYSTRACK -le 35 ]
  # do single more than 35
  if [ $PHYSTRACK -le 39 ]
  then
  rm bitmap.dat 2>/dev/null

      KEEPTRYING=1
  if [ $TRY_DYNAMIC -eq 1 ]  # not any more - it isnt really working and needs a revamp AND it is not set for the slower speed now - WAIT WHAT? it is doing the heavy lifting of bad reads!!!
  then
  DETECT_TYPE=010 # dynamic
  ADV_PIPELEN=300
  #ADV_PIPELEN=100 # better
  #ADV_PIPELEN=3000
  #ADV_TIMING=-1
  ADV_TIMING=0
  $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING $SAVE_RAW $TRACK 1>>/var/tmp/1 2>>/var/tmp/2
      STATUS=$?
   LASTLINE=`tail -1 /var/tmp/2`
   echo -n "$LASTLINE"
   echo -n $'\r'
      echo "DYN XXX Track $TRACK $STATUS" >>work/3
      KEEPTRYING=1
      if [ $STATUS -eq 0 ]
      then
        KEEPTRYING=0
      fi
  fi

  if [ $TRY_TIMED -eq 1 -a $KEEPTRYING -eq 1 ]
  then
    ###DETECT_TYPE=$F
    DETECT_TYPE=3 # do within prog now
    #DETECT_TYPE=4 # do within prog now
    ADV_PIPELEN=3000
    ADV_TIMING=0
    $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING $SAVE_RAW $TRACK 1>>/var/tmp/1 2>>/var/tmp/2
      STATUS=$?
   LASTLINE=`tail -1 /var/tmp/2`
   echo -n "$LASTLINE"
   echo -n $'\r'
      echo "TIM XXX Track $TRACK $STATUS" >>work/3
      KEEPTRYING=1
      if [ $STATUS -eq 0 ]
      then
        KEEPTRYING=0
      fi
    ###
    #done
  fi

  if [ $TRY_ALLSORTS -eq 1 ]
  then
    #for F in 800 820 840 860 880 870 900 920 940 960 980 1000 1020 1040 1044 1060 1080 1100 1120 1140 1160 1180
    for F in 900 820 840 860 880 870 800 920 940 960 980 1000 1020 1040 1044 1060 1080 1100 1120 1140 1160 1180 700
    do
      if [ $KEEPTRYING -eq 1 ]
      then
        DETECT_TYPE=$F
        ADV_PIPELEN=3000
        ADV_TIMING=0
        $DECODER  $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING $SAVE_RAW $TRACK 1>>/var/tmp/1 2>>/var/tmp/2
        STATUS=$?
   LASTLINE=`tail -1 /var/tmp/2`
   echo -n "$LASTLINE"
   echo -n $'\r'
        echo "ALL $F Track $TRACK $STATUS" >>work/3
        KEEPTRYING=1
        if [ $STATUS -eq 0 ]
        then
          KEEPTRYING=0
        fi
      fi
    done
  fi


  if [ 1 -eq 0 ] # RPM360
  then
  DETECT_TYPE=870
  ADV_PIPELEN=3000
  ADV_TIMING=0
  $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING $SAVE_RAW 1>>/var/tmp/1 2>>/var/tmp/2

  #
  DETECT_TYPE=1000
  ADV_PIPELEN=3000
  ADV_TIMING=0
  $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>/var/tmp/1 2>>2
  fi

  if [ 1 -eq 0 ] # RPM300
  then
  DETECT_TYPE=1044 #1044
  ADV_PIPELEN=3000
  ADV_TIMING=0
  $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>/var/tmp/1 2>>2

  DETECT_TYPE=1200
  ADV_PIPELEN=3000
  ADV_TIMING=0
  $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>/var/tmp/1 2>>2
  fi

  #--
  #DETECT_TYPE=1740 ; ADV_PIPELEN=3000 ; ADV_TIMING=0 ; $DECODER  $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>work/1 2>>2
  #DETECT_TYPE=2000 ; ADV_PIPELEN=3000 ; ADV_TIMING=0 ; ./$DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>work/1 2>>2
  #--

  if [ 1 -eq 0 ]
  then
    # new addition
    for F in 800 820 840 860 880 900 920 940 960 980 1000 1020  
    do
      DETECT_TYPE=$F
      ADV_PIPELEN=3000
      ADV_TIMING=0
      $DECODER $LIST $DETECT_TYPE $OUTPUT_TYPE $TRACK_MONITOR $SECTOR_MONITOR $MONITOR_OFFSET $ADV_PIPELEN $ADV_TIMING 1>>/var/tmp/1 2>>2
    done
  fi

  # switch this of for flux output
  if [ $SHOW_LOGICALFLUX -eq 0 ]
  then
    if [ $SHOW_GCR -eq 1 ]
    then
      ./genstrip >>/var/tmp/1
    fi 
  fi 

  #------------------------------------------------------------------------------
  if [ 1 -eq $SORT ]
  then
	# SORT #
  	sort /var/tmp/1 > /var/tmp/1.sort ; cat /var/tmp/1.sort >/var/tmp/1
  fi

  # accumulate
  if [ 1 -eq 1 ]
  then
    cat /var/tmp/1 >>/var/tmp/1.col
    cat /var/tmp/2 >>/var/tmp/all2.out
  fi

  if [ 1 -eq 0 ]
  then
  egrep -a "CKS|END OF" /var/tmp/2 | awk '
  /HEADER.*OK / { if(h)print"";printf $0 ;h=1 } 
  /END OF/ { if (h) print;h=0 }
  #q | sort -n -k8  | tee -a check.out | uniq -c | awk q
  ' | sort -n -k8  | uniq -c | awk '
	   { why[$12][$9]=why[$12][$9] $0"\n" }
	   /HEADER.*BAD . SECTOR/ { if (v[$12][$9]<10-2) { t[$12]=1; v[$12][$9]++; }; next; } 
	   /BAD!.*post:000[01]/    { if (v[$12][$9]<10-1) { t[$12]=1; v[$12][$9]=9; }; next; } 
	   /BAD/                   { if (v[$12][$9]<10-2) { t[$12]=1; v[$12][$9]++; }; next; } 
	   /GOOD.*NONCODE/         { if (v[$12][$9]<10-1) { t[$12]=1; v[$12][$9]=10; }; next; } 
	   /GOOD/                  { if (v[$12][$9]<30)   { t[$12]=1; v[$12][$9]=20; } }
	   /GOOD.*post:0001/       { if (v[$12][$9]<40)   { t[$12]=1; v[$12][$9]=30; } }
	   /GOOD.*post:0000/       { t[$12]=1; v[$12][$9]=40; }
       END { 
       for (x in t) if (x+0>=0 && x+0 <=80) {
	        if (x+0==1) {printf("SEC:     01   5    0    5    0\n");}
                valid=0;
		for (i=0; i<30; ++i) if (v[x][i]>0) valid=1;
		if (valid) {
		printf("TRACK:%2d ",x);
		for (i=0; i<30; ++i) {
			if (v[x][i]==10) { c="N";  # non code detected
				#print "\n"why[x][i];
			} else if (v[x][i]==20) { c="P";  # post code not 0
			} else if (v[x][i]==30) { c=":";  # post code 1
			} else if (v[x][i]==40) { c=".";  # post code 0 ckm good etc
			} else if (v[x][i]>=9) { c="C"; 
			} else if (v[x][i]>1) { c="X"; 
			} else if (v[x][i]>0) { c="x"; 
			} else if (x+0<=17 && i+0<21  \
			       || x+0<=24 && i+0<19 \
			       || x+0<=30 && i+0<18 \
			       || x+0<=40 && i+0<17 \
			       || x+0>35 && x+0<=17+35 && i+0<21  \
			       || x+0>35 && x+0<=24+35 && i+0<19 \
			       || x+0>35 && x+0<=30+35 && i+0<18 \
			       || x+0>35 && x+0<=40+35 && i+0<17 \
			       ) { c="?"; 
		       } else { c=" ";
			  #print ">>>x=" x" i="i"..."; if (x<=17 && i<21) {printf("WHY HERE?");}
		       }
			printf(c);
			count[c]++;
			#if (x+0==35 && i+0==11) print "\n"why[x][i]"with code ="c"\n";
			if (x+0=='$TRACK_MONITOR' && i+0=='$SECTOR_MONITOR') print "\n"why[x][i]"with code ="c"\n";
		} /* for all sectors */
		} /* valid-ish sector */
	} /* for all tracks - usually just one */
		printf(" ");
		s=""
		for (c in count) if (c!=" ") { s=s sprintf("%s=%d ",c,count[c]); }
		printf("%-25s",s);
		printf("    ");
      }
    '
  #echo -n "$LIST Parm " $2 " "
  echo -n "GOOD:  `egrep "^  END OF" /var/tmp/2 |grep GOOD | wc -l` "
  echo "BAD:   `egrep "^  END OF" /var/tmp/2 |grep BAD | wc -l` "
  else
    echo "" # to move of same line
  fi # do awk summary

  fi # only 1-35 (0-34 s?)
done

date

#MAX=6000
#LINES=`cat 1.col | wc -l` ; export LINES
LINES=`head -8000 /var/tmp/1.col | wc -l` ; export LINES
if [ "$LINES" = "0" ]
then
	echo "skipping image create (empty output)"
	rm 1.png 2>/dev/null
else
	#(echo "P3";echo "1280 $LINES"; echo "255") >1.ppm 
	#(echo "P3";echo "4096 $LINES"; echo "255") >1.ppm 

	XSIZE=`head -1 /var/tmp/1.col | wc -w | awk '{print$1/3}'`
	(echo "P3";echo "$XSIZE $LINES"; echo "255") >/var/tmp/1.ppm 
	#cat 1.col >> 1.ppm
	head -8000 /var/tmp/1.col >> /var/tmp/1.ppm
	convert /var/tmp/1.ppm 1.png
	#feh --force-aliasing 1.png
fi

#######
# END #
#######
